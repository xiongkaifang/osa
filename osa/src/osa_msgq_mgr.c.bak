/** ============================================================================
 *
 *  Copyright (C), 1987 - 2015, xiong-kaifang Tech. Co.,, Ltd.
 *
 *  @File name:	osa_msgq_mgr.c
 *
 *  @Author: xiong-kaifang   Version: v1.0   Date: 2013-04-04
 *
 *  @Description:   The osa msg queue manager.
 *	
 *
 *  @Version:	    v1.0
 *
 *  @Function List:  //	主要函数及功能
 *	    1.  －－－－－
 *	    2.  －－－－－
 *
 *  @History:	     //	历史修改记录
 *
 *	<author>	    <time>	     <version>	    <desc>
 *  xiong-kaifang   2013-04-04     v1.0	        Write this module.
 *
 *
 *  ============================================================================
 */

/*  --------------------- Include system headers ---------------------------- */

/*  --------------------- Include user headers   ---------------------------- */
#include "osa_msgq_mgr.h"
#include "osa_msgq.h"
#include "osa_mem.h"
#include "osa_mutex.h"
#include "dlist.h"

#if defined(__cplusplus)
extern "C" {
#endif

/*
 *  --------------------- Macro definition -------------------------------------
 */

/** ============================================================================
 *  @Macro:         Macro name
 *
 *  @Description:   Description of this macro.
 *  ============================================================================
 */
#define MSGQ_MGR_CRITICAL_ENTER()       \
    do {                                \
        mutex_lock(&glb_mgr_mutex);     \
    } while (0)

#define MSGQ_MGR_CRITICAL_LEAVE()       \
    do {                                \
        mutex_unlock(&glb_mgr_mutex)    \
    } while (0)

/*
 *  --------------------- Structure definition ---------------------------------
 */

/** ----------------------------------------------------------------------------
 *  @Name:          Structure name
 *
 *  @Description:   Description of the structure.
 *
 *  @Field:         Field1 member
 *
 *  @Field          Field2 member
 *  ----------------------------------------------------------------------------
 */
struct __msgq_node_t; typedef struct __msgq_node_t msgq_node_t;
struct __msgq_node_t
{
    DLIST_ELEMENT_RESERVED;
    unsigned char   m_name[32];
    struct __msgq_t m_msgq;
};

struct __msgq_mgr_t; typedef struct __msgq_mgr_t msgq_mgr_t;
struct __msgq_mgr_t
{
    unsigned int    m_reserver[2];
    Bool            m_initialied;

    mutex_t         m_mutex;
    unsigned int    m_msgq_cnt;
    unsigned int    m_msgq_used;
    msgq_node_t   * m_msgqs;
    dlist_t         m_busy_list;
    dlist_t         m_free_list;
};

typedef struct __msgq_mgr_t * msgq_mgr_handle;

static msgq_prm_t   glb_mgr_prm  = {
    .m_msgq_cnt    = MSGQ_MGR_MSGQ_MAX
};

static msgq_mgr_t   glb_msgq_mgr = {
    .m_initialized = FALSE,
};

static unsigned int glb_cur_init = 0;

OSA_DECLARE_AND_INIT_MUTEX(glb_mgr_mutex);

/*
 *  --------------------- Global variable definition ---------------------------
 */

/** ----------------------------------------------------------------------------
 *  @Name:          Variable name
 *
 *  @Description:   Description of the variable.
 * -----------------------------------------------------------------------------
 */

/*
 *  --------------------- Local function forward declaration -------------------
 */

/** ============================================================================
 *
 *  @Function:	    Local function forward declaration.
 *
 *  @Description:   //	函数功能、性能等的描述
 *
 *  @Calls:	        //	被本函数调用的函数清单
 *
 *  @Called By:	    //	调用本函数的函数清单
 *
 *  @Table Accessed://	被访问的表（此项仅对于牵扯到数据库操作的程序）
 *
 *  @Table Updated: //	被修改的表（此项仅对于牵扯到数据库操作的程序）
 *
 *  @Input:	        //	对输入参数的说明
 *
 *  @Output:	    //	对输出参数的说明
 *
 *  @Return:	    //	函数返回值的说明
 *
 *  @Enter          //  Precondition
 *
 *  @Leave          //  Postcondition
 *
 *  @Others:	    //	其它说明
 *
 *  ============================================================================
 */

/*
 *  --------------------- Public function definition ---------------------------
 */

/** ============================================================================
 *
 *  @Function:	    Public function definition.
 *
 *  @Description:   //	函数功能、性能等的描述
 *
 *  @Calls:	        //	被本函数调用的函数清单
 *
 *  @Called By:	    //	调用本函数的函数清单
 *
 *  @Table Accessed://	被访问的表（此项仅对于牵扯到数据库操作的程序）
 *
 *  @Table Updated: //	被修改的表（此项仅对于牵扯到数据库操作的程序）
 *
 *  @Input:	        //	对输入参数的说明
 *
 *  @Output:	    //	对输出参数的说明
 *
 *  @Return:	    //	函数返回值的说明
 *
 *  @Enter          //  Precondition
 *
 *  @Leave          //  Postcondition
 *
 *  @Others:	    //	其它说明
 *
 *  ============================================================================
 */
status_t msgq_mgr_init(msgq_mgr_prm_t *prm)
{
    int i;
    Bool need_init = FALSE;
    status_t status = OSA_SOK;
    msgq_mgr_handle mgr_hdl = &glb_msgq_mgr;

    MSGQ_MGR_CRITICAL_ENTER();
    if (glb_cur_init++ == 0) {
        need_init = TURE;
    }
    MSGQ_MGR_CRITICAL_LEAVE();

    if (!need_init) {
        return status;
    }

    OSA_assert(TRUE == need_init);

    if (prm == NULL) {
        prm = &glb_mgr_prm;
    }

    hdl->m_msgq_cnt = prm->m_msgq_cnt;
    status = OSA_memAlloc(sizeof(msgq_node_t) * hdl->m_msgq_cnt, &hdl->m_msgq);
    if (OSA_ISERROR(status) || hdl->m_msgq == NULL) {
        return OSA_EMEM;
    }
    hdl->m_msgq_used = 0;

    status |= mutex_create(&hdl->m_mutex);
    status |= dlist_init(&hdl->m_busy_list);
    status |= dlist_init(&hdl->m_free_list);
    OSA_assert(OSA_SOK == status);

    for (i = 0; i < hdl->m_msgq_cnt; i++) {
		status |= msgq_init(&hdl->m_msgqs[i]);
        status |= dlist_initialize_element(&hdl->m_msgqs[i]);
        status |= dlist_put_tail(hdl->m_free_list, (dlist_element_t *)&hdl->m_msgqs[i]);
        OSA_assert(OSA_SOK == status);
    }

    mgr_hdl->m_initialied = TRUE;

    return status;
}

status_t msgq_mgr_register(const char *name, msgq_t *msgq, msgq_attrs_t *attrs)
{
    status_t status = OSA_SOK;
    msgq_node_t *msgq_node;
    msgq_mgr_handle hdl = &glb_msgq_mgr;

    OSA_assert(hdl->m_initialized == TRUE);

    mutex_lock(&hdl->m_mutex);
    
    if (hdl->m_msgq_used < hdl->m_msgq_cnt) {
        status |= dlist_get_head(hdl->m_free_list, (dlist_element_t **)&msgq_node);

        snprintf(msgq_node->m_name, sizeof(msgq_node->m_name) - 1, "%s", name);
        (&msgq) = (msgq_t)&msgq_node->m_msgq;

        status |= dlist_put_tail(hdl->m_busy_list, (dlist_element_t *)msgq_node);
        hdl->m_msgq_used++;
    } else {
        status = OSA_ENOENT;
    }

    mutex_unlock(&hdl->m_mutex);

    return status;

}

status_t msgq_mgr_internal_find(msgq_mgr_t *msgq_mgr, const char *name, msgq_node_t **node)
{
    status_t status = OSA_ENOENT;
    Bool found = FALSE;
    msgq_mgr_handle hdl = msgq_mgr;
    msgq_node_t  * cur_nod_hdl = NULL;
    msgq_node_t  * nex_nod_hdl = NULL;

    status = dlist_first(hdl->m_busy_list, (dlist_element_t **)&cur_nod_hdl);
    while ((cur_nod_hdl != NULL) && !OSA_ISERROR(status)) {

        if (strncmp(cur_nod_hdl->m_name, name,
                    sizeof(cur_nod_hdl->m_name) - 1) == 0) {
            found = TRUE;
            status = OSA_SOK;
            break;
        }

        status = dlist_next(hdl->m_busy_list,
                            (dlist_element_t *) cur_nod_hdl,
                            (dlist_element_t **)&nex_nod_hdl
                            );
        if (!OSA_ISERROR(status)) {
            cur_node_hdl = nex_nod_hdl;
        } else {
            break;
        }
    }

    return status;
}

status_t msgq_mgr_find(const char *name, msgq_t *msgq)
{
    status_t status = OSA_ENOENT;
    msgq_node_t *msgq_node  = NULL;
    msgq_mgr_handle hdl = &glb_msgq_mgr;

    OSA_assert(mgr_hdl->m_initialized == TRUE);

    (*msgq) =(msgq_t)MSGQ_INVALID_ID;
    mutex_lock(&hdl->m_mutex);
    
    if (hdl->m_msgq_used > 0) {

        status = msgq_mgr_internal_find(hdl, name, &msgq_node);
        if (!OSA_ISERROR(status)) {
            (*msgq) = (msgq_t)&msgq_node->m_msgq;
        }
    } 

    mutex_unlock(&hdl->m_mutex);

    return status;
}

status_t msgq_mgr_unregister(const char *name, msgq_t msgq)
{
    status_t status = OSA_ENOENT;
    msgq_node_t *msgq_node  = NULL;
    msgq_mgr_handle hdl = &glb_msgq_mgr;

    OSA_assert(mgr_hdl->m_initialized == TRUE);

    mutex_lock(&hdl->m_mutex);
    
    if (hdl->m_msgq_used > 0) {

        status = msgq_mgr_internal_find(hdl, name, &msgq_node);
        if (!OSA_ISERROR(status)) {
            status |= dlist_remove_element(hdl->m_busy_list, (dlist_element_t *)msgq_node);
            OSA_assert((&msgq_node->m_msgq) == msgq);
            status |= dlist_put_tail(hdl->m_free_list, (dlist_element_t *)msgq_node);
            hdl->m_msgq_used--;
        }
    } 

    mutex_unlock(&hdl->m_mutex);

    return status;
}

status_t msgq_mgr_deinit()
{
	int i;
    Bool need_deinit = FALSE;
    status_t status = OSA_SOK;
    msgq_mgr_handle hdl = &glb_msgq_mgr;

    OSA_assert(hdl->m_initialized == TRUE);

    MSGQ_MGR_CRITICAL_ENTER();
    if (--glb_cur_init == 0) {
        need_deinit = TRUE;
    }
    MSGQ_MGR_CRITICAL_ENTER();

    if (!need_deinit) {
        return status;
    }

    OSA_assert(TRUE == need_deinit);

	for (i = 0; i < hdl->m_msgq_cnt; i++) {
		status |= msgq_deinit(hdl->m_msgqs + i);
	}
	
    status |= mutex_delete(&hdl->m_mutex);

    if (hdl->m_msgqs != NULL) {
        OSA_memFree(sizeof(msgq_node_t) * hdl->m_msgq_cnt, hdl->m_msgqs);
        hdl->m_msgqs = NULL;
    }
    hdl->m_initialized = FALSE;

    return status;
}

/*
 *  --------------------- Local function definition ----------------------------
 */

/** ============================================================================
 *
 *  @Function:	    Local function definition.
 *
 *  @Description:   //	函数功能、性能等的描述
 *
 *  ============================================================================
 */

#if defined(__cplusplus)
}
#endif
