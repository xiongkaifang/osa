#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import time
import traceback

from xml.dom.minidom import parse
from string import Template



try:
	
	xmlfile = sys.argv[1] + '/lusim/ipnc/avserver/scripts/ipnc_cmds.xml'
	filename_c = sys.argv[1] + '/lusim/ipnc/avserver/generated/ipnc_cmds.c'
	filename_h = sys.argv[1] + '/lusim/ipnc/avserver/generated/ipnc_cmds.h'
	
	templ_c_file_header = Template("""
/*
 * ipnc_cmds.c
 *
 * This file is automatically generated on ${generation_time}
 * DO NOT modify this file!
 */
 
#include "ipnc_cmds.h"
 
#define  MAKE_DEFAULT_VALUE(x)		((void*) (x))
  
"""
	)
	
	templ_h_file_header = Template("""
/*
 * ipnc_cmds.h
 *
 * This file is automatically generated on ${generation_time}
 * DO NOT modify this file!
 */

#ifndef IPNC_CMDS_H_
#define IPNC_CMDS_H_

#include "../include/cmdshell.h"

"""
	)
	
	str_c_file_tailer = "/* generated file ipnc_cmds.c ends. */\n"
	str_h_file_tailer = "#endif  /* IPNC_CMDS_H_ */\n"
		
	dom = parse(xmlfile)
	
	
	fp_c = open(filename_c, "w")
	fp_h = open(filename_h, "w")
	
	try :
		fp_h.write(templ_h_file_header.substitute(generation_time = time.ctime(time.time())))
		fp_c.write(templ_c_file_header.substitute(generation_time = time.ctime(time.time())))

		ipnc_cmdlist = dom.documentElement.getElementsByTagName("cmd")
	
		#Write file contents here
		num_cmds = 0
		
		fp_h.write("/* ipnc management console command codes*/\n\n")
		for cmd in ipnc_cmdlist:
			id = cmd.getAttribute("id")
			idtxt = cmd.getAttribute("idtxt")
			fp_h.write("#define {0:32s}{1:16d}\n".format(idtxt, int(id)))
			num_cmds = num_cmds + 1		
		fp_h.write("\n#define {0:32s}{1:16d}\n\n".format("IPNC_NUM_CMDS", num_cmds))
		fp_h.write("extern struct ipnc_cmd_description gbl_ipnc_cmds[IPNC_NUM_CMDS];\n\n")
		
		for cmd in ipnc_cmdlist:
			id			= cmd.getAttribute("idtxt")
			cmdtxt 		= cmd.getAttribute("cmd")
			arglist 	= cmd.getElementsByTagName("arg")
			if(arglist.length > 0):
				arg_idx		= 0
				argname = "ipnc_cmd_{0}_args".format(cmdtxt)
				fp_c.write("static struct ipnc_cmd_arg_description {0}[{1}] = \n".format(argname, arglist.length))
				fp_c.write("{\n")
				for cmd_arg in arglist :
					arg_type 	= cmd_arg.getAttribute("type")
					arg_tag 	= cmd_arg.getAttribute("tag")
					arg_name	= cmd_arg.getAttribute("name")
					arg_required= cmd_arg.getAttribute("required")
					arg_defv	= cmd_arg.getAttribute("default_value")
					fp_c.write("\t{\n")
					fp_c.write("\t\t.{0:12s} = {1},\n".format("type", arg_type))
					fp_c.write("\t\t.{0:12s} = \"{1}\",\n".format("tag", arg_tag))
					fp_c.write("\t\t.{0:12s} = \"{1}\",\n".format("name", arg_name))
					fp_c.write("\t\t.{0:12s} = {1},\n".format("is_required", arg_required))
					if arg_defv != "":
						fp_c.write("\t\t.{0:12s} = MAKE_DEFAULT_VALUE({1}),\n".format("default_value", arg_defv))
					fp_c.write("\t},\n")
					
					fp_h.write("#define {0:32s}{1:16d}\n".format(id + "_ARG_" + arg_tag, arg_idx))
					
					arg_idx		=	arg_idx + 1
				fp_c.write("};\n\n")
		
		fp_h.write("\n")
		fp_c.write("struct ipnc_cmd_description gbl_ipnc_cmds[IPNC_NUM_CMDS] = \n")
		fp_c.write("{\n")
		for cmd in ipnc_cmdlist:
			id 			= cmd.getAttribute("idtxt")
			cmdtxt 		= cmd.getAttribute("cmd")
			desc 		= cmd.getAttribute("desc")
			access 		= cmd.getAttribute("access")
			arglist 	= cmd.getElementsByTagName("arg")
			nargs 		= arglist.length
			
			fp_c.write("\t{\n")
			fp_c.write("\t\t.{0:12s} = {1},\n".format("id", id))
			fp_c.write("\t\t.{0:12s} = \"{1}\",\n".format("cmd", cmdtxt))
			fp_c.write("\t\t.{0:12s} = \"{1}\",\n".format("description", desc))
			fp_c.write("\t\t.{0:12s} = {1},\n".format("access", access))
			fp_c.write("\t\t.{0:12s} = {1},\n".format("nargs", nargs))
			
			if(nargs == 0): 
				fp_c.write("\t\t.{0:12s} = NULL,\n".format("args"))
			else:
				argname = "ipnc_cmd_{0}_args".format(cmdtxt)
				fp_c.write("\t\t.{0:12s} = {1},\n".format("args", argname))
			
			fp_c.write("\t},\n")
			
		fp_c.write("};\n\n")
		
		#End writting file contents
		fp_h.write(str_h_file_tailer)
		fp_c.write(str_c_file_tailer)
	finally:
		fp_c.close();
		fp_h.close();
	
	
	print 'parse_ipnc_cmds: Successed to generate ipnc command files.'
except:
	
	traceback.print_exc()
	sys.exit( 'parse_ipnc_cmds: Failed to generate ipnc command files.')
	
