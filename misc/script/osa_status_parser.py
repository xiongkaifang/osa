#!/usr/bin/python
#
# -*- coding: utf-8 -*-
#
################################################################################
#
#
#  @File name:	osa_status_parser.py
#
#  @Author: ztao   Version: v1.0   Date: 2012-03-20
#
#  @Description:   The python script to generate osa status codes.
#
#
#  @History:	   Review history.
#
#	<author>	    <time>	     <version>	    <desc>
#  z-tao           2012-03-20     v1.0	        Write this script.
#
#  xiong-kaifang   2015-07-28     v2.0          Rewrite this scrip.
#
################################################################################

import os
import sys
import time
import traceback

from xml.dom.minidom import parse
from string import Template


try:

    xmlfile  = sys.argv[1]

    dom      = parse(xmlfile)
    nod_name = dom.documentElement.nodeName

    source   = '{0}.c'.format(nod_name)
    header   = '{0}.h'.format(nod_name)

    source_template = Template("""
/*
 * ${module_name}.c
 *
 * This file is automatically generated on ${generation_time}
 * DO NOT modify this file!
 *
 */

#include "${module_name}.h"
 
"""
    )

    header_template = Template("""
/*
 * ${module_name}.h
 *
 * This file is automatically generated on ${generation_time}
 * DO NOT modify this file!
 *
 */

#if !defined (__${module_name_upper}_H)
#define __${module_name_upper}_H

"""
    )

    source_tailer = "/* Generated file {0}.c ends. */\n"
    header_tailer = "#endif  /* if !defined (__{0}_H) */\n"


    src_fp        = open(source, "w")
    hdr_fp        = open(header, "w")

    try :

        hdr_fp.write(header_template.substitute(module_name     = nod_name,
                                                generation_time = time.ctime(time.time()),
                                                module_name_upper = nod_name.upper()))

        src_fp.write(source_template.substitute(module_name     = nod_name,
                                                generation_time = time.ctime(time.time())))

        status_list = dom.documentElement.getElementsByTagName("status")

        num_status = status_list.length

        src_fp.write("static osa_status_descp_t glb_status_descps[OSA_STATUS_DESCP_NUM] =\n")
        src_fp.write("{\n")

        for status in status_list:
            id      = status.getAttribute("id")
            cls     = status.getAttribute("class")
            type    = status.getAttribute("type")
            flags   = status.getAttribute("flags")
            name    = status.getAttribute("name")
            msg     = status.getAttribute("msg")

            class_str  = "OSA_STATUS_CLASS_GENERAL"

            if  (cls == "Network"):
                class_str = "OSA_STATUS_CLASS_NETWORK"
            elif (cls == "Io"):
                class_str = "OSA_STATUS_CLASS_IO"
            elif (cls == "App"):
                class_str = "OSA_STATUS_CLASS_APP"

            type_str = "OSA_STATUS_TYPE_SUCCESS"

            if (type == "Warning"):
                type_str = "OSA_STATUS_TYPE_WARNING"
            elif (type == "Error"):
                type_str = "OSA_STATUS_TYPE_ERROR"

            flag_str = "0"
            if (flags != ""):
                flag_str = flags

            id_str = "({0:24s}|{1:23s}|{2}|{3})".format(class_str, type_str, flag_str, id)
            
            hdr_fp.write("#define {0:29s}{1:16s}\n".format(name, id_str))
            src_fp.write("\t{\n")
            src_fp.write("\t\t.m_id = {0},\n".format(name))
            src_fp.write("\t\t.m_msg = \"{0}\",\n".format(msg))
            src_fp.write("\t},\n")

        src_fp.write("};\n\n")

        hdr_fp.write("\n#define {0:29s}{1:d}\n\n".format("OSA_STATUS_DESCP_NUM", num_status))
        hdr_fp.write("extern osa_status_descp_t glb_status_descps[OSA_STATUS_DESCP_NUM];\n\n")

        #End writting file contents
        hdr_fp.write(header_tailer.format(nod_name.upper()))
        src_fp.write(source_tailer.format(nod_name))

    finally:
        src_fp.close();
        hdr_fp.close();


    print '{0}: Successed to generate {0} files.'.format(nod_name)

except:

    traceback.print_exc()
    sys.exit( '{0}: Failed to generate {0} files.'.format(nod_name))
